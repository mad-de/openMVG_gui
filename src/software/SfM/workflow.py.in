#!/usr/bin/python
#! -*- encoding: utf-8 -*-

# A base workflow for OpenMVG

import commands
import os
import subprocess
import sys
import re

# Define global vars

def get_parent_dir(directory):
    import os
    return os.path.dirname(directory)

# Initialize vars
total_output = "Workflow finished.";
user_vars = { };
dict_field = "";

# Fill dictionary with index and field
for num in sys.argv[1:]:
 dict_name = re.findall(r'\w+\ ?(?=\=)',num);
 dict_field = num.replace(dict_name[0] + "=", "")
 user_vars.update({dict_name[0] : dict_field});

# Indicate the openMVG binary directory
OPENMVG_SFM_BIN = "@OPENMVG_SOFTWARE_SFM_BUILD_DIR@"
OPENMVG_PMVS_BIN = "@OPNENMVG_PMVS_BIN_PATH@"
OPENMVS_BIN = os.path.join(os.path.expanduser('~'), "openMVS_build/bin")
# Indicate the openMVG camera sensor width directory
CAMERA_SENSOR_WIDTH_DIRECTORY = "@OPENMVG_SOFTWARE_SFM_SRC_DIR@" + "/../../openMVG/exif/sensor_width_database"
camera_file_params = os.path.join(CAMERA_SENSOR_WIDTH_DIRECTORY, "sensor_width_camera_database.txt")

if user_vars["step"] == "matching":
 # Indicate Input dir
 input_eval_dir = user_vars["inputpath"]
 # Check if last character is a / and if so cut output dir by 1 and append _out
 if user_vars["inputpath"].endswith('/'): output_eval_dir = os.path.join(user_vars["inputpath"][:-1] + "_out")
 else: output_eval_dir = os.path.join(user_vars["inputpath"] + "_out")
 if not os.path.exists(output_eval_dir):
  os.mkdir(output_eval_dir)

 input_dir = input_eval_dir
 output_dir = output_eval_dir
    
 matches_dir = os.path.join(output_dir, "matches")

 # Create the ouput/matches folder if not present
 if not os.path.exists(matches_dir):
  os.mkdir(matches_dir)

 # -c = 3 = default pinhole camera
 # 1. Image listing - generate sfm_data.json
 pIntrisics = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_SfMInit_ImageListing"),  "-i", input_dir, "-o", matches_dir, "-d", camera_file_params, "-c", user_vars["camera_model"]] )
 pIntrisics.wait()
 # 2. Compute features
 pFeatures = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeFeatures"),  "-i", matches_dir+"/sfm_data.json", "-o", matches_dir, "-m", "SIFT", "-f" , "1"] )
 pFeatures.wait()

 if os.path.exists(matches_dir+"/sfm_data.json"):
  print "\n\n************************************************\nMatching complete. Press Next to continue.\n************************************************"
 else:
  print "Something went wrong :/";

elif user_vars["step"] == "sfm_solver":
 output_eval_dir = user_vars["inputpath"][:-8]
 # Incremental sfm solver
 if user_vars["solver"] == "1":
  #  3.1 SEQUENTIAL: Compute matches") -r = ratio (0.8 is recommended) -f = force to recompute data every time
  pMatches = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeMatches"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-o", user_vars["inputpath"], "-r", user_vars["ratio"], "-f", "1"] )
  pMatches.wait()

  reconstruction_dir = os.path.join(output_eval_dir+"reconstruction_sequential/")
  # print ("3.2 SEQUENTIAL: Reconstruction") 
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_IncrementalSfM"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-m", user_vars["inputpath"], "-o", reconstruction_dir, "-a", user_vars["image1"], "-b", user_vars["image2"], "-c", user_vars["camera_model"] ] )
  pRecons.wait()

  # print ("3.3 SEQUENTIAL: Colorize Structure")
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeSfM_DataColor"),  "-i", reconstruction_dir+"sfm_data.json", "-o", os.path.join(reconstruction_dir,"colorized.ply")] )
  pRecons.wait()

  # print ("3.4 SEQUENTIAL: Structure from Known Poses (robust triangulation)")
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeStructureFromKnownPoses"),  "-i", reconstruction_dir+"sfm_data.json", "-m", user_vars["inputpath"], "-o", os.path.join(reconstruction_dir,"robust.ply")] )
  pRecons.wait()

  # Reconstruction for the global SfM pipeline
  # - global SfM pipeline use matches filtered by the essential matrices
  # - g; f: Fundamental matrix filtering e: Essential matrix filtering (all the image must have the same known focal length) h: Homography matrix filtering
 if user_vars["solver"] == "2":
  # print ("4.1 GLOBAL: Compute matches")
  pMatches = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeMatches"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-o", user_vars["inputpath"], "-r", user_vars["ratio"], "-g", user_vars["matrix_filter"]] )
  pMatches.wait()

  reconstruction_dir = os.path.join(output_eval_dir,"reconstruction_global/")
  # print ("4.2 GLOBAL: Reconstruction") INVESTIGATE LATER:  "-c", user_vars["camera_model"] doesnt work (Unrecognized option -c)
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_GlobalSfM"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-m", user_vars["inputpath"], "-o", reconstruction_dir ] )
  pRecons.wait()

  # print ("4.3 GLOBAL: Colorize Structure")
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeSfM_DataColor"),  "-i", reconstruction_dir+"sfm_data.json", "-o", os.path.join(reconstruction_dir,"colorized.ply")] )
  pRecons.wait()

  # print ("4.4 GLOBAL: Structure from Known Poses (robust triangulation)")
  pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeStructureFromKnownPoses"),  "-i", reconstruction_dir+"sfm_data.json", "-m", user_vars["inputpath"], "-o", os.path.join(reconstruction_dir,"robust.ply")] )
  pRecons.wait()

 if os.path.exists(os.path.join(reconstruction_dir,"robust.ply")):
  print "preview_path " + os.path.join(reconstruction_dir,"robust.ply end_path");
  print "mvs_output_path " + os.path.join(reconstruction_dir," end_path");
  print "\n\n************************************************\nMatching complete.\nOutput folder: " + reconstruction_dir + ".\nPress Next to continue.\n************************************************"
 else:
  print "Something went wrong :/";

elif user_vars["step"] == "pmvs":
 pPMVS = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2PMVS"),  "-i", os.path.join(user_vars["inputpath"]+"sfm_data.json"), "-o", user_vars["output_dir"]] )
 pPMVS.wait()

 # Check if openMVS path exists - if not terminate
 if not os.path.exists(OPENMVG_PMVS_BIN):
  sys.stderr.write("The PMVS binary files couldn't be found. Please check if PMVS is installed correctly in the" + OPENMVG_PMVS_BIN + "folder or specify another folder during building with the \"-DOPNENMVG_PMVS_PATH=\" variable.");
 else: 

  pPMVS2 = subprocess.Popen( [os.path.join(OPENMVG_PMVS_BIN, "pmvs2"), os.path.join(user_vars["output_dir"], "PMVS/"), "pmvs_options.txt"] )
  pPMVS2.wait()
  if os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply")):
   print "preview_path " + os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply end_path");
   print "\n\n************************************************\nRunning PMVS complete.\nOutput folder: " + os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply") + ".\nPress Finish to close program or check out the Preview.\n************************************************"
  else:
   sys.stderr.write("An error occured during running PMVS. The process halted.");


#./pmvs /home/martin/openMVG_build/software/SfM/ImageDataset_SceauxCastle/images_out/PMVS/ pmvs_options.txt

#./cmvs /home/martin/openMVG_build/software/SfM/ImageDataset_SceauxCastle/images_out/PMVS/ [MaxImageCountByCluster=100]
#./cmvs /home/martin/openMVG_build/software/SfM/ImageDataset_SceauxCastle/images_out/PMVS/ 30
#./genOption /home/martin/openMVG_build/software/SfM/ImageDataset_SceauxCastle/images_out/PMVS/
#./pmvs2 /home/martin/openMVG_build/software/SfM/ImageDataset_SceauxCastle/images_out/PMVS/ option-0000

elif user_vars["step"] == "cmpmvs":
 print ("4.6. Export global results to CMPMVS")
 pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2CMPMVS"),  "-i", reconstruction_dir+"/sfm_data.json", "-o", reconstruction_dir] )
 total_output += ("\nThe global CMPMVS folder was created in the "+reconstruction_dir+"/PMVS directory")
 pRecons.wait()
 
elif user_vars["step"] == "openMVS":
 # Check if openMVS path exists - if not terminate
 if not os.path.exists(OPENMVS_BIN):
  sys.stderr.write("The OpenMVS binary files couldn't be found. Please check if openMVS is installed correctly in the /openMVS_build/bin folder.");
 else:  
  # Check if necessary vars are set
  if not "use_densify" in user_vars:
   user_vars["use_densify"] = "OFF";

  if not "use_refine" in user_vars:
   user_vars["use_refine"] = "OFF";

  if not os.path.exists(user_vars["output_dir"]):
   os.mkdir(user_vars["output_dir"])

  # 1. Import
  pMVSImport = subprocess.Popen([os.path.join(OPENMVS_BIN, "InterfaceOpenMVG"),  "-i", os.path.join(user_vars["inputpath"], "sfm_data.json"), "-o", os.path.join(user_vars["output_dir"], "scene.mvs")])
  pMVSImport.wait()

  if os.path.exists(os.path.join(user_vars["output_dir"], "scene.mvs")):
   still_working = 1;
  else:
    sys.stderr.write("An error occured during Import. The MVS process halted.");
    still_working = 0;

  # 2. Densify Point Cloud (optional)
  if still_working == 1 and user_vars["use_densify"] == "ON":
   pMVSDensify = subprocess.Popen( [os.path.join(OPENMVS_BIN, "DensifyPointCloud"),  "-i", os.path.join(user_vars["output_dir"], "scene.mvs"), "-o", os.path.join(user_vars["output_dir"], "scene_dense.mvs")] )
   pMVSDensify.wait()

   if not os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense.mvs")):
    sys.stderr.write("An error occured during Densify. The MVS process halted.");
    still_working = 0;

  # 3. Reconstruct Meshes
  if user_vars["use_densify"] == "ON":
   this_input_file = "scene_dense.mvs";
  else:
   this_input_file = "scene.mvs";

  if still_working == 1:
   pMVSReconstruct = subprocess.Popen( [os.path.join(OPENMVS_BIN, "ReconstructMesh"),  "-i", os.path.join(user_vars["output_dir"], this_input_file), "-o", os.path.join(user_vars["output_dir"], "scene_mesh.mvs")] )
   pMVSReconstruct.wait()

   if not os.path.exists(os.path.join(user_vars["output_dir"], "scene_mesh.mvs")):
    sys.stderr.write("An error occured during Reconstruct. The MVS process halted.");
    still_working = 0;

  # 4. Refine Meshes (optional)
  if still_working == 1 and user_vars["use_refine"] == "ON":
   pMVSRefine = subprocess.Popen( [os.path.join(OPENMVS_BIN, "RefineMesh"),  "-i", os.path.join(user_vars["output_dir"], "scene_mesh.mvs"), "-o", os.path.join(user_vars["output_dir"], "scene_dense_mesh.mvs")] )
   pMVSRefine.wait()

   if not os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense_mesh.mvs")):
    sys.stderr.write("An error occured during Refine. The MVS process halted.");
    still_working = 0;

  # 5. Texture Meshes
  if user_vars["use_refine"] == "ON":
   this_input_file = "scene_dense_mesh.mvs";
  else:
   this_input_file = "scene_mesh.mvs";

  if still_working == 1:
   pMVSRefine = subprocess.Popen( [os.path.join(OPENMVS_BIN, "TextureMesh"),  "-i", os.path.join(user_vars["output_dir"], this_input_file), "-o", os.path.join(user_vars["output_dir"], "scene_dense_mesh_texture.mvs")] )
   pMVSRefine.wait()

   if os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense_mesh_texture.mvs")):
    print "preview_path " + os.path.join(user_vars["output_dir"],"scene_dense_mesh_texture.ply end_path");
    print "\n\n************************************************\nRunning openMVS complete.\nOutput folder: " + user_vars["output_dir"] + ".\nPress Finish to close program or check out the Preview.\n************************************************"
   else:
    sys.stderr.write("An error occured during Texturing. The MVS process halted.");

else:
 pass
