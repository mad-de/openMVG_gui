#!/usr/bin/python
#! -*- encoding: utf-8 -*-

# A base workflow for OpenMVG

import commands
import os
import subprocess
import sys
import re

# Define global vars

def get_parent_dir(directory):
    import os
    return os.path.dirname(directory)

# Initialize vars
total_output = "Workflow finished.";
user_vars = { };
dict_field = "";

# Fill dictionary with index and field
for num in sys.argv[1:]:
 dict_name = re.findall(r'\w+\ ?(?=\=)',num);
 dict_field = num.replace(dict_name[0] + "=", "")
 user_vars.update({dict_name[0] : dict_field});

# Indicate the openMVG binary directory
OPENMVG_SFM_BIN = "@OPENMVG_SOFTWARE_SFM_BUILD_DIR@"
OPENMVG_PMVS_BIN = "@OPENMVG_PMVS_BIN_PATH@"
if "@OPENMVS_BIN_PATH@" == "not-set":
 OPENMVS_BIN = os.path.join(os.path.expanduser('~'), "openMVS_build/bin")
else:
 OPENMVS_BIN = "@OPENMVS_BIN_PATH@"
# Indicate the openMVG camera sensor width directory
CAMERA_SENSOR_WIDTH_DIRECTORY = "@OPENMVG_SOFTWARE_SFM_SRC_DIR@" + "/../../openMVG/exif/sensor_width_database"
camera_file_params = os.path.join(CAMERA_SENSOR_WIDTH_DIRECTORY, "sensor_width_camera_database.txt")

# Catch errors
def erroroutput (output, last_str, last_exec):
 if (output):
  return True;
 else:
  sys.stderr.write("An error occured during " + last_exec + ". The process halted. Last command:\n");
  sys.stderr.write("\"" + " ".join(str(x) for x in last_str) + "\"");
  return False;

if user_vars["step"] == "matching":
 # Indicate Input dir
 input_eval_dir = user_vars["inputpath"]
 # Check if last character is a / and if so cut output dir by 1 and append _out
 if user_vars["inputpath"].endswith('/'): 
  output_eval_dir = os.path.join(user_vars["inputpath"][:-1] + "_out")
 else: 
  output_eval_dir = os.path.join(user_vars["inputpath"] + "_out")
 if not os.path.exists(output_eval_dir):
  os.mkdir(output_eval_dir)

 input_dir = input_eval_dir
 output_dir = output_eval_dir
    
 matches_dir = os.path.join(output_dir, "matches")

 # Create the ouput/matches folder if not present
 if not os.path.exists(matches_dir):
  os.mkdir(matches_dir)

 # -c = 3 = default pinhole camera
 # 1. Image listing - generate sfm_data.json
 curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_SfMInit_ImageListing"),  "-i", input_dir, "-o", matches_dir, "-d", camera_file_params, "-c", user_vars["camera_model"] ]
 pIntrisics = subprocess.Popen(curr_string)
 pIntrisics.wait()
 still_working = erroroutput(os.path.exists(os.path.join(matches_dir, "sfm_data.json")), curr_string, "SfMInit_ImageListing")
 
 # 2. Compute features
 if still_working:
  curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeFeatures"),  "-i", matches_dir+"/sfm_data.json", "-o", matches_dir, "-m", user_vars["descr_meth"], "-f" , user_vars["force"], "-p", user_vars["descr_pres"] ]
  pFeatures = subprocess.Popen(curr_string)
  pFeatures.wait()
  still_working = erroroutput(os.path.exists(os.path.join(matches_dir, "image_describer.json")), curr_string, "ComputeFeratures")
  if still_working:
   print "\n\n************************************************\nMatching complete. Press Next to continue.\n************************************************"

elif user_vars["step"] == "sfm_solver":
 output_eval_dir = user_vars["inputpath"][:-8]

 # Incremental sfm solver
 if user_vars["solver"] == "1":
  #  SEQUENTIAL: Compute matches -r = ratio (0.8 is recommended) -f = force to recompute data every time
  curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeMatches"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-o", user_vars["inputpath"], "-r", user_vars["ratio"], "-f", user_vars["force"] ]
  pMatches = subprocess.Popen(curr_string)
  pMatches.wait()
  still_working = erroroutput(os.path.exists(os.path.join(user_vars["inputpath"], "geometric_matches")), curr_string, "ComputeMatches")

  if still_working:
   # SEQUENTIAL: Reconstruction 
   reconstruction_dir = os.path.join(output_eval_dir+"reconstruction_sequential/")
   curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_IncrementalSfM"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-m", user_vars["inputpath"], "-o", reconstruction_dir, "-a", user_vars["image1"], "-b", user_vars["image2"], "-c", user_vars["camera_model"] ]
   pRecons = subprocess.Popen(curr_string)
   pRecons.wait()
   still_working = erroroutput(os.path.exists(os.path.join(reconstruction_dir, "sfm_data.json")), curr_string, "IncrementalSfM")

  # Reconstruction for the global SfM pipeline
  # - global SfM pipeline use matches filtered by the essential matrices
  # - g; f: Fundamental matrix filtering e: Essential matrix filtering h: Homography matrix filtering
 if user_vars["solver"] == "2":
  # GLOBAL: Compute matches
  curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeMatches"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-o", user_vars["inputpath"], "-r", user_vars["ratio"], "-g", user_vars["matrix_filter"], "-f", user_vars["force"] ]
  pMatches = subprocess.Popen(curr_string)
  pMatches.wait()
  still_working = erroroutput(os.path.exists(os.path.join(user_vars["inputpath"], "geometric_matches")), curr_string, "ComputeMatches")

  if still_working:
   # GLOBAL: Reconstruction
   reconstruction_dir = os.path.join(output_eval_dir,"reconstruction_global/")
   curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_GlobalSfM"),  "-i", user_vars["inputpath"]+"sfm_data.json", "-m", user_vars["inputpath"], "-o", reconstruction_dir ]
   pRecons = subprocess.Popen(curr_string)
   pRecons.wait()
   still_working = erroroutput(os.path.exists(os.path.join(reconstruction_dir, "sfm_data.json")), curr_string, "GlobalSfM")

 # SHARED by Global & Incremental Pipeline
 if still_working:
  # Colorize Structure
  curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeSfM_DataColor"),  "-i", reconstruction_dir+"sfm_data.json", "-o", os.path.join(reconstruction_dir,"colorized.ply")]
  pColorize = subprocess.Popen(curr_string)
  pColorize.wait()
  still_working = erroroutput(os.path.exists(os.path.join(reconstruction_dir,"colorized.ply")), curr_string, "ComputeSfM_DataColor")

 if still_working:
  # Structure from Known Poses (robust triangulation)
  curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeStructureFromKnownPoses"),  "-i", reconstruction_dir+"sfm_data.json", "-m", user_vars["inputpath"], "-o", os.path.join(reconstruction_dir,"robust.ply")]
  pRobust = subprocess.Popen(curr_string)
  pRobust.wait()
  still_working = erroroutput(os.path.exists(os.path.join(reconstruction_dir,"robust.ply")), curr_string, "ComputeStructureFromKnownPoses")
 
 if still_working:
  print "preview_path " + os.path.join(reconstruction_dir,"robust.ply end_path");
  print "mvs_output_path " + os.path.join(reconstruction_dir," end_path");
  print "\n\n************************************************\nMatching complete.\nOutput folder: " + reconstruction_dir + ".\nPress Next to continue.\n************************************************"

elif user_vars["step"] == "pmvs":
 curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2PMVS"),  "-i", os.path.join(user_vars["inputpath"]+"sfm_data.json"), "-o", user_vars["output_dir"] ]
 pPMVS = subprocess.Popen(curr_string)
 pPMVS.wait()
 still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/pmvs_options.txt")), curr_string, "openMVG2PMVS")

 # Check if PMVS path exists - if not terminate
 if not os.path.exists(OPENMVG_PMVS_BIN):
  sys.stderr.write("The PMVS binary files couldn't be found. Please check if PMVS is installed correctly in the" + OPENMVG_PMVS_BIN + "folder or specify another folder during building with the \"-DOPENMVG_PMVS_PATH=\" variable.");
  sys.stderr.write("PMVS output path: " + user_vars["output_dir"] + "/PMVS/");

 else: 
  if still_working:
   curr_string = [os.path.join(OPENMVG_PMVS_BIN, "pmvs2"), os.path.join(user_vars["output_dir"], "PMVS/"), "pmvs_options.txt"]
   pPMVS2 = subprocess.Popen(curr_string)
   pPMVS2.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply")), curr_string, "pmvs2")

  if still_working:
   print "preview_path " + os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply end_path");
   print "\n\n************************************************\nRunning PMVS complete.\nOutput file: " + os.path.join(user_vars["output_dir"], "PMVS/models/pmvs_options.txt.ply") + "\nPress Finish to close the program or press Preview to check out the preview.\n************************************************"

elif user_vars["step"] == "cmvs":
 curr_string = [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2PMVS"),  "-i", os.path.join(user_vars["inputpath"]+"sfm_data.json"), "-o", user_vars["output_dir"]]
 pCMVS = subprocess.Popen(curr_string)
 pCMVS.wait()
 still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/pmvs_options.txt")), curr_string, "openMVG2PMVS")

 # Check if PMVS path exists - if not terminate
 if not os.path.exists(OPENMVG_PMVS_BIN):
  sys.stderr.write("The PMVS binary files couldn't be found. Please check if PMVS is installed correctly in the" + OPENMVG_PMVS_BIN + "folder or specify another folder during building with the \"-DOPENMVG_PMVS_PATH=\" variable.");
  sys.stderr.write("PMVS output path:" + user_vars["output_dir"]);
 else: 
  if still_working:
   curr_string = [os.path.join(OPENMVG_PMVS_BIN, "cmvs"), os.path.join(user_vars["output_dir"], "PMVS/"), "[MaxImageCountByCluster=100]"]
   pPMVS2 = subprocess.Popen(curr_string)
   pPMVS2.wait()

   curr_string = [os.path.join(OPENMVG_PMVS_BIN, "cmvs"), os.path.join(user_vars["output_dir"], "PMVS/"), "30"]
   pPMVS3 = subprocess.Popen(curr_string)
   pPMVS3.wait()

   curr_string = [os.path.join(OPENMVG_PMVS_BIN, "genOption"), os.path.join(user_vars["output_dir"], "PMVS/")]
   pGenOption = subprocess.Popen(curr_string)
   pGenOption.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/option-0000")), curr_string, "cmvs genOption")

  if still_working:
   curr_string = [os.path.join(OPENMVG_PMVS_BIN, "pmvs2"), os.path.join(user_vars["output_dir"], "PMVS/"), "option-0000"]
   pPMVS4 = subprocess.Popen(curr_string)
   pPMVS4.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "PMVS/models/option-0000.ply")), curr_string, "pmvs2")

  if still_working:
   print "preview_path " + os.path.join(user_vars["output_dir"], "PMVS/models/option-0000.ply end_path");
   print "\n\n************************************************\nRunning CMVS complete.\nOutput file: " + os.path.join(user_vars["output_dir"], "PMVS/models/option-0000.ply") + "\nPress Finish to close the program or press Preview check out the preview.\n************************************************"

elif user_vars["step"] == "cmpmvs":
 pCMPMVS = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2CMPMVS"),  "-i", os.path.join(user_vars["inputpath"]+"sfm_data.json"), "-o", user_vars["output_dir"]] )
 pCMPMVS.wait()
 print "\n\n************************************************\nExporting to CMPMVS complete.\nOutput folder: " + os.path.join(user_vars["output_dir"], "CMPMVS/") + "\nPress Finish to close the program.\n************************************************"
 
elif user_vars["step"] == "mve":
 pMVE = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_openMVG2MVE2"),  "-i", os.path.join(user_vars["inputpath"]+"sfm_data.json"), "-o", user_vars["output_dir"]] )
 pMVE.wait()
 print "\n\n************************************************\nExporting to MVE complete.\nOutput folder: " + os.path.join(user_vars["output_dir"], "MVE/") + "\nPress Finish to close the program.\n************************************************"

elif user_vars["step"] == "openMVS":
 # Check if openMVS path exists - if not terminate
 if not os.path.exists(OPENMVS_BIN):
  sys.stderr.write("The OpenMVS binary files couldn't be found. Please check if openMVS is installed correctly in the /openMVS_build/bin folder.");
 else:  
  # Check if necessary vars are set
  if not "use_densify" in user_vars:
   user_vars["use_densify"] = "OFF";

  if not "use_refine" in user_vars:
   user_vars["use_refine"] = "OFF";

  if not os.path.exists(user_vars["output_dir"]):
   os.mkdir(user_vars["output_dir"])

  # 1. Import
  curr_string = [ os.path.join(OPENMVS_BIN, "InterfaceOpenMVG"),  "-i", os.path.join(user_vars["inputpath"], "sfm_data.json"), "-o", os.path.join(user_vars["output_dir"], "scene.mvs"), "-w", user_vars["output_dir"] ]
  pMVSImport = subprocess.Popen(curr_string)
  pMVSImport.wait()
  still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "scene.mvs")), curr_string, "InterfaceOpenMVG")

  # 2. Densify Point Cloud (optional)
  if still_working and user_vars["use_densify"] == "ON":
   curr_string = [os.path.join(OPENMVS_BIN, "DensifyPointCloud"),  "-i", os.path.join(user_vars["output_dir"], "scene.mvs"), "-o", os.path.join(user_vars["output_dir"], "scene_dense.mvs"), "-w", user_vars["output_dir"] ]
   pMVSDensify = subprocess.Popen(curr_string)
   pMVSDensify.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense.mvs")), curr_string, "DensifyPointCloud")

  # 3. Reconstruct Meshes
  if user_vars["use_densify"] == "ON":
   this_input_file = "scene_dense.mvs";
  else:
   this_input_file = "scene.mvs";

  if still_working:
   curr_string = [os.path.join(OPENMVS_BIN, "ReconstructMesh"),  "-i", os.path.join(user_vars["output_dir"], this_input_file), "-o", os.path.join(user_vars["output_dir"], "scene_mesh.mvs"), "-w", user_vars["output_dir"] ]
   pMVSReconstruct = subprocess.Popen(curr_string)
   pMVSReconstruct.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "scene_mesh.mvs")), curr_string, "ReconstructMesh")

  # 4. Refine Meshes (optional)
  if still_working and user_vars["use_refine"] == "ON":
   curr_string = [os.path.join(OPENMVS_BIN, "RefineMesh"),  "-i", os.path.join(user_vars["output_dir"], "scene_mesh.mvs"), "-o", os.path.join(user_vars["output_dir"], "scene_dense_mesh.mvs"), "-w", user_vars["output_dir"] ]
   pMVSRefine = subprocess.Popen(curr_string)
   pMVSRefine.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense_mesh.mvs")), curr_string, "RefineMesh")

  # 5. Texture Meshes
  if user_vars["use_refine"] == "ON":
   this_input_file = "scene_dense_mesh.mvs";
  else:
   this_input_file = "scene_mesh.mvs";

  if still_working:
   curr_string = [os.path.join(OPENMVS_BIN, "TextureMesh"),  "-i", os.path.join(user_vars["output_dir"], this_input_file), "-o", os.path.join(user_vars["output_dir"], "scene_dense_mesh_texture.mvs"), "-w", user_vars["output_dir"] ]
   pMVSTexture = subprocess.Popen(curr_string)
   pMVSTexture.wait()
   still_working = erroroutput(os.path.exists(os.path.join(user_vars["output_dir"], "scene_dense_mesh_texture.mvs")), curr_string, "TextureMesh")
   if still_working:
    print "preview_path " + os.path.join(user_vars["output_dir"],"scene_dense_mesh_texture.ply end_path");
    print "\n\n************************************************\nRunning openMVS complete.\nOutput folder: " + user_vars["output_dir"] + ".\nPress Finish to close the program or check out the Preview.\n************************************************"
    
else:
 pass
